{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"ea32336b20544d0368de7a38955479d94fedd787","modified":1670900240098},{"_id":"source/_posts/Java-String-compareTo方法详解.md","hash":"0598fce729d80b227adaad974e4bbfc086063d47","modified":1670900240098},{"_id":"source/_posts/docker安装MySQL5-7.md","hash":"afe5ef032b0c38e64c786fb6bbce15221b59f16d","modified":1670900847021},{"_id":"source/_posts/pages搭建hexo博客.md","hash":"09e64f076a5e1ab10a77e12d5177fe0b279f06fc","modified":1670917307308},{"_id":"source/categories/index.md","hash":"7651f65a34ccb3b9e6b173cfc4684b138ccc4f11","modified":1670900240108},{"_id":"source/link/index.md","hash":"8c235991483ce1743d6499310d8c61cfa7ab307a","modified":1670900240108},{"_id":"source/tags/index.md","hash":"710ac1804acf85ae22cc8d25d228556d9b533313","modified":1670900240108},{"_id":"source/_posts/pages搭建hexo博客/2.jpg","hash":"744235504424a8c29cc0bb038746c17ea3273735","modified":1670913936944},{"_id":"source/_posts/pages搭建hexo博客/4.jpg","hash":"af915e69f285a74e344815cef5afc5a136a1d2ac","modified":1670915614513},{"_id":"source/_posts/pages搭建hexo博客/1.jpg","hash":"80465e4612a102a4434d5f70ecab4dd55f1ae1c5","modified":1670913122970},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1667146250000},{"_id":"themes/butterfly/README.md","hash":"c34579d9d7239828ce7d8abc235521eaf4ea9e17","modified":1667146250000},{"_id":"themes/butterfly/README_CN.md","hash":"25cfdbaf9883095322259c4f49bd08f0a7cffa0e","modified":1667146250000},{"_id":"themes/butterfly/_config.yml","hash":"81913d80786e8f89ddc9cae77c18905b02b361fd","modified":1667146250000},{"_id":"themes/butterfly/package.json","hash":"513295c02e8b78606be2c3993f5068c928189467","modified":1667146250000},{"_id":"themes/butterfly/plugins.yml","hash":"d46811a3c50f7057681ac496de4beda107aa26b6","modified":1667146250000},{"_id":"themes/butterfly/languages/default.yml","hash":"1e37a3695d50e3e61d7c36e58a6dac872a4a56cd","modified":1667146250000},{"_id":"themes/butterfly/languages/en.yml","hash":"d1bb560698eb8b0079495b7b18b44facb610f9fd","modified":1667146250000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"28b6f0c39155651d747eb595e0a283bc97be2e09","modified":1667146250000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"947f794e862bb2813e36887f777bdb760f70a322","modified":1667146250000},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1667146250000},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1667146250000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1667146250000},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1667146250000},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1667146250000},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1667146250000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1667146250000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1667146250000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1667146250000},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1667146250000},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"346b6b650b9dee4844f3be7865886002f82da24c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"7dee9b73acdec2a34d41a45119ebe8bb8650bf6c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"919020d4cd7ae68694b2326edeed4328c7f933cd","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"acfe765fb2c607bff7198630dbfa53a888c36357","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b4940a5c73d3a5cd8bb5883e3041ecdd905a74e0","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"a3d1f417965ca20253c36f9e93429f3df6268856","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1667146250000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1667146250000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"ee3e70098eb0849497d50b75e18cf4a27c397d52","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b4cd617c619d1a0df93603721a6fa1317526174b","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"763dab5c83f50c1c62fffc9a9dfedea29bb4e629","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"d368a8830e506c8b5eb6512b709ec8db354d5ea1","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1667146250000},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1667146250000},{"_id":"themes/butterfly/source/css/var.styl","hash":"e018dad9f674fc5564112b99032fe5fe8b2d195f","modified":1667146250000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1667146250000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1667146250000},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1667146250000},{"_id":"themes/butterfly/source/js/main.js","hash":"189359400f6cd4d814ca9ebb5a27b96f7031bce3","modified":1667146250000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1667146250000},{"_id":"themes/butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"fe4d847177b824e09c75e9c7b723184c708c569a","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"2df5a033104775ee9c8715925bb32c3ec5b75da0","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"aa175e2254704335f4da09175e59ef2375ca7d03","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"c4b86758f3a3deae4612c31d725814c8753a7804","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"278855fe4399489bdef0393697bb87420e671fe9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"6ae047d566289294cc2f6192cacbff297cec9f1a","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e3d574921fca8e756923bf3b303835e57b9a26b2","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"142621f70bedcb5033ee99a988f7bb6c5eea3493","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1667146250000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"644d520fe80cc82058467708ab82ccad313b0c27","modified":1667146250000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1667146250000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"a92984f566c97bb4179f34be79240af1552c6f17","modified":1667146250000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"a0010d833ed30211601c1e0bbbc68e85b77428c6","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"a457a0dbe23af21a7b6b8bfc5ee103c9fe92e89c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"23db4e3cab68fed78601fc8a9c39ff5753bcc716","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"56389925671c7e8da0c033769421269e15e8f795","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"8c90483d461e09cb06e91b16d8bb7b3205b0a40c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1667146250000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"51e45625929d57c9df3ba9090af99b9b7bb9a15b","modified":1667146250000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1667146250000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1667146250000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1667146250000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1667146250000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"b2aadea7351fae8382b8c2a3b9de810d922b0ec1","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"5f648086a33a32d169a2f8d8c549c08aa02f67db","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"0611d9216f4c128ebdea4cc21454c3dc4a6398d5","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"ccb7d8ce3ded7364f9a15334b68ad73869fca757","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"49dcc23815e1d5264bb65c91e7dc67b1a723d1ea","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"98ef20f8a3b10c1692f9b2b3c06033d2da8a8eae","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"eefdaa94956adc7a3ca90dd8edcd70a7574b439c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"22e2ef30fe5eb1db7566e89943c74ece029b2a8e","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"15462d1ed04651ad3b430c682842ac400f6f9b47","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"1c846c8d51649b8554d91536323eaeb20c8fc236","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"c12c898b35dd014780c1f3220ddbe12e7270983c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"dd0bc119029b62dce5dc965d5de7377e438fa29a","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1667146250000},{"_id":"source/_posts/pages搭建hexo博客/3.jpg","hash":"f3a02e1c8f3a6d458d37f25c993b9a6f663fc3a9","modified":1670915407754},{"_id":"public/404.html","hash":"675a40ca2713c571c00984db81d5b62fde0211d6","modified":1670917318375},{"_id":"public/categories/index.html","hash":"aef996e84dcdac0d44f08375be0a49ed3ba3ba0b","modified":1670917318375},{"_id":"public/tags/index.html","hash":"e67b04b9234d9916cb71a66eece9956f72cdb860","modified":1670917318375},{"_id":"public/categories/docker/index.html","hash":"d1892f2cc5aed43cfb70380d97ddc94e84354018","modified":1670917318375},{"_id":"public/categories/Java/index.html","hash":"c636f51e359462da8156ad762381b65988c4a6ac","modified":1670917318375},{"_id":"public/categories/运维/index.html","hash":"1dd2c2729369dff77d71773bc7924a5f3b8c135e","modified":1670917318375},{"_id":"public/tags/docker/index.html","hash":"82ee7d2bb94f46dd59493dbdaa0c9bb794acc19a","modified":1670917318375},{"_id":"public/tags/MySQL/index.html","hash":"9af0fd39a626781abed06eb50a4c2699723c1bb8","modified":1670917318375},{"_id":"public/tags/MySQL5-7/index.html","hash":"f57e67aba43022c28a04611dc49e25b2a65ec7ce","modified":1670917318375},{"_id":"public/tags/Java基础/index.html","hash":"d3436df3bdd8741ed90f5ef548ae554853514ec5","modified":1670917318375},{"_id":"public/tags/String/index.html","hash":"bff8a92b8734b8d3c1934d0c26da7884c2549a7b","modified":1670917318375},{"_id":"public/tags/compareTo/index.html","hash":"b621e847570c22705132bbe0f0eb442cb3b614ac","modified":1670917318375},{"_id":"public/tags/hexo/index.html","hash":"9914bf36000e7dacf301599db89f9cea6b46b6aa","modified":1670917318375},{"_id":"public/tags/github/index.html","hash":"3ae012dfb11af95f754ad81010fee9735edeae12","modified":1670917318375},{"_id":"public/tags/github-pages/index.html","hash":"73d6114a1810ff74c5d1df0e673525ca8f1bc30f","modified":1670917318375},{"_id":"public/tags/博客/index.html","hash":"f35de61c05fa0821122139862a6394db539cda15","modified":1670917318375},{"_id":"public/link/index.html","hash":"b595404ce2541bcd192b4c00d6df1b45b5732265","modified":1670917318375},{"_id":"public/posts/5434c7eb.html","hash":"a9fd5d57bf5b29aa2523d4e295e0a98c74180e9f","modified":1670917318375},{"_id":"public/posts/928514d2.html","hash":"b5c0027320717a3d319c2e4288dc66b6ce722567","modified":1670917318375},{"_id":"public/posts/8dcdc3f.html","hash":"d6e9f63172cae045bcd47b0e5fabdaa35fcc0e9a","modified":1670917318375},{"_id":"public/archives/index.html","hash":"457d0ae23d6c750525add654714274b91d776ba0","modified":1670917318375},{"_id":"public/archives/2022/index.html","hash":"f53b683c2c018bbb41e47b93ec189c5802f9e39e","modified":1670917318375},{"_id":"public/archives/2022/12/index.html","hash":"59e84551c2c994def594b030475cdd9f21bc868e","modified":1670917318375},{"_id":"public/index.html","hash":"8e17c500fbb983208a9e5fd7ff2b0bb3d096bbfd","modified":1670917318375},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1670917318375},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1670917318375},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1670917318375},{"_id":"public/posts/5434c7eb/2.jpg","hash":"744235504424a8c29cc0bb038746c17ea3273735","modified":1670917318375},{"_id":"public/posts/5434c7eb/4.jpg","hash":"af915e69f285a74e344815cef5afc5a136a1d2ac","modified":1670917318375},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1670917318375},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1670917318375},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1670917318375},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1670917318375},{"_id":"public/css/index.css","hash":"57b2d737e612b621aa477b7be1a63f19d16a747a","modified":1670917318375},{"_id":"public/js/main.js","hash":"189359400f6cd4d814ca9ebb5a27b96f7031bce3","modified":1670917318375},{"_id":"public/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1670917318375},{"_id":"public/posts/5434c7eb/1.jpg","hash":"80465e4612a102a4434d5f70ecab4dd55f1ae1c5","modified":1670917318375},{"_id":"public/posts/5434c7eb/3.jpg","hash":"f3a02e1c8f3a6d458d37f25c993b9a6f663fc3a9","modified":1670917318375}],"Category":[{"name":"docker","_id":"clblx16cw0003vgvj5kc37eq4"},{"name":"Java","_id":"clblx16d5000evgvj8w3h7sc8"},{"name":"运维","_id":"clblx16d7000gvgvj619khk2a"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"categories","date":"2022-12-11T12:07:47.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-12-11 20:07:47\ntype: \"categories\"\n---\n","updated":"2022-12-13T02:57:20.108Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clblx16ci0000vgvj5hyi3167","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""},{"title":"link","date":"2022-12-11T12:08:07.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2022-12-11 20:08:07\ntype: \"link\"\n---\n","updated":"2022-12-13T02:57:20.108Z","path":"link/index.html","comments":1,"layout":"page","_id":"clblx16ct0002vgvjgopbcajh","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""},{"title":"tags","date":"2022-12-11T12:07:17.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-12-11 20:07:17\ntype: \"tags\"\n---\n","updated":"2022-12-13T02:57:20.108Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clblx16cz0005vgvj3wzyh5br","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""}],"Post":[{"title":"docker安装MySQL5.7","abbrlink":"8dcdc3f","date":"2022-12-11T11:48:53.000Z","description":"教你怎么在docker中快速安装MySQL5.7。妈妈再也不用担心我不会安装MySQL了！","_content":"在docker中安装MySQL5.7比较简单，直接执行以下命令就可以了：\n```shell\ndocker run -p 3306:3306 --name mysql5.7 \\\n--restart=always \\\n-v /root/docker/mysql/conf:/etc/mysql/mysql.conf.d \\\n-v /root/docker/mysql/logs:/var/log/ \\\n-v /root/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\n-d mysql:5.7\n\n```\n**注意：**“/root/docker/mysql”是我们主机的目录，自己提前用mkdir命令把相关目录建好，例如：\n```shell\nmkdir -p /root/docker/mysql/conf\n```\n\n**命令中各个参数的意义：**\n“-p 3306:3306”：将容器内部的3306端口映射到机器上，使得MySQL可以在容器外被连接。\n“--name mysql5.7”：这个容器的名字叫mysql5.7。\n“--restart=always”：在容器退出时总是重启容器。意思就是docker重启后会自动启动这个容器，不需要再手动执行docker start命令\n“-v /root/docker/mysql/conf:/etc/mysql/mysql.conf.d”：将容器内的“/etc/mysql/mysql.conf.d”目录挂载到我们主机的“/root/docker/mysql/conf”目录\n","source":"_posts/docker安装MySQL5-7.md","raw":"---\ntitle: docker安装MySQL5.7\ncategories: docker\ntags:\n  - docker\n  - MySQL\n  - MySQL5.7\nabbrlink: 8dcdc3f\ndate: 2022-12-11 19:48:53\ndescription: 教你怎么在docker中快速安装MySQL5.7。妈妈再也不用担心我不会安装MySQL了！\n---\n在docker中安装MySQL5.7比较简单，直接执行以下命令就可以了：\n```shell\ndocker run -p 3306:3306 --name mysql5.7 \\\n--restart=always \\\n-v /root/docker/mysql/conf:/etc/mysql/mysql.conf.d \\\n-v /root/docker/mysql/logs:/var/log/ \\\n-v /root/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\n-d mysql:5.7\n\n```\n**注意：**“/root/docker/mysql”是我们主机的目录，自己提前用mkdir命令把相关目录建好，例如：\n```shell\nmkdir -p /root/docker/mysql/conf\n```\n\n**命令中各个参数的意义：**\n“-p 3306:3306”：将容器内部的3306端口映射到机器上，使得MySQL可以在容器外被连接。\n“--name mysql5.7”：这个容器的名字叫mysql5.7。\n“--restart=always”：在容器退出时总是重启容器。意思就是docker重启后会自动启动这个容器，不需要再手动执行docker start命令\n“-v /root/docker/mysql/conf:/etc/mysql/mysql.conf.d”：将容器内的“/etc/mysql/mysql.conf.d”目录挂载到我们主机的“/root/docker/mysql/conf”目录\n","slug":"docker安装MySQL5-7","published":1,"updated":"2022-12-13T03:07:27.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clblx16cm0001vgvj21e87wwr","content":"<p>在docker中安装MySQL5.7比较简单，直接执行以下命令就可以了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p 3306:3306 --name mysql5.7 \\</span><br><span class=\"line\">--restart=always \\</span><br><span class=\"line\">-v /root/docker/mysql/conf:/etc/mysql/mysql.conf.d \\</span><br><span class=\"line\">-v /root/docker/mysql/logs:/var/log/ \\</span><br><span class=\"line\">-v /root/docker/mysql/data:/var/lib/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">-d mysql:5.7</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>“/root/docker/mysql”是我们主机的目录，自己提前用mkdir命令把相关目录建好，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /root/docker/mysql/conf</span><br></pre></td></tr></table></figure>\n\n<p><strong>命令中各个参数的意义：</strong><br>“-p 3306:3306”：将容器内部的3306端口映射到机器上，使得MySQL可以在容器外被连接。<br>“–name mysql5.7”：这个容器的名字叫mysql5.7。<br>“–restart=always”：在容器退出时总是重启容器。意思就是docker重启后会自动启动这个容器，不需要再手动执行docker start命令<br>“-v /root/docker/mysql/conf:/etc/mysql/mysql.conf.d”：将容器内的“/etc/mysql/mysql.conf.d”目录挂载到我们主机的“/root/docker/mysql/conf”目录</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<p>在docker中安装MySQL5.7比较简单，直接执行以下命令就可以了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p 3306:3306 --name mysql5.7 \\</span><br><span class=\"line\">--restart=always \\</span><br><span class=\"line\">-v /root/docker/mysql/conf:/etc/mysql/mysql.conf.d \\</span><br><span class=\"line\">-v /root/docker/mysql/logs:/var/log/ \\</span><br><span class=\"line\">-v /root/docker/mysql/data:/var/lib/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">-d mysql:5.7</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>“/root/docker/mysql”是我们主机的目录，自己提前用mkdir命令把相关目录建好，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /root/docker/mysql/conf</span><br></pre></td></tr></table></figure>\n\n<p><strong>命令中各个参数的意义：</strong><br>“-p 3306:3306”：将容器内部的3306端口映射到机器上，使得MySQL可以在容器外被连接。<br>“–name mysql5.7”：这个容器的名字叫mysql5.7。<br>“–restart=always”：在容器退出时总是重启容器。意思就是docker重启后会自动启动这个容器，不需要再手动执行docker start命令<br>“-v /root/docker/mysql/conf:/etc/mysql/mysql.conf.d”：将容器内的“/etc/mysql/mysql.conf.d”目录挂载到我们主机的“/root/docker/mysql/conf”目录</p>\n"},{"title":"Java String compareTo方法详解","abbrlink":"928514d2","date":"2022-12-11T11:53:47.000Z","description":"带你了解一下String中的compareTo方法。揭露那些不为人知的代码！","_content":"### 解释\ncompareTo方法来自Comparable接口，String实现了该接口，具体实现如下：\n\n```java\n/**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * <p>\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let <i>k</i> be the smallest such index; then the string\n     * whose character at position <i>k</i> has the smaller value, as\n     * determined by using the &lt; operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * <blockquote><pre>\n     * this.charAt(k)-anotherString.charAt(k)\n     * </pre></blockquote>\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * <blockquote><pre>\n     * this.length()-anotherString.length()\n     * </pre></blockquote>\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        int len1 = value.length;\n        int len2 = anotherString.value.length;\n        int lim = Math.min(len1, len2);\n        char v1[] = value;\n        char v2[] = anotherString.value;\n\n        int k = 0;\n        while (k < lim) {\n            char c1 = v1[k];\n            char c2 = v2[k];\n            if (c1 != c2) {\n                return c1 - c2;\n            }\n            k++;\n        }\n        return len1 - len2;\n    }\n```\n根据上面的代码，我们可以知道String的compareTo是单个字符依次进行比较的，于是可以得出如下结论：\n1、如果两个字符串的长度一样，从下标为0的位置开始，依次比较每个位置上字符的Unicode码值的大小，如果相等，则继续比较下一个位置，否则直接返回两者Unicode码值的差值，如果所有位置的字符的Unicode码值都相等，则返回两个字符串的长度差值，即0;\n2、如果两个字符串的长度不一样，从下标为0的位置开始，依次比较每个位置上字符的Unicode码值的大小，如果相等，则继续比较下一个位置，否则直接返回两者Unicode码值的差值，如果长度更短的字符串的所有位置都毕竟比较完了，发现都是相等，则返回两个字符串的长度差值（<font color='red'>注意：这里有一个需要避坑的地方，千万不要拿长度不一样的数字字符串去compareTo比较，比如\"2\".compareTo(\"15\")，你可能期望返回-1，实际却返回1</font>）。\n\n### 实例\n```java\n    String str1 = \"ABC\";\n    String str2 = \"ABC\";\n    String str3 = \"ABD\";\n    String str4 = \"ABCD\";\n    String str5 = \"ABCDE\";\n    String str6 = \"你好\";\n    String str7 = \"大家好\";\n    String str8 = \"2\";\n    String str9 = \"15\";\n\n    System.out.println(\"ABC与ABC比较：\" + str1.compareTo(str2));\n    System.out.println(\"ABC与ABD比较：\" + str1.compareTo(str3));\n    System.out.println(\"ABC与ABCD比较：\" + str1.compareTo(str4));\n    System.out.println(\"ABC与ABCDE比较：\" + str1.compareTo(str5));\n    System.out.println(\"你好与大家好比较：\" + str6.compareTo(str7));// 返回你和大的Unicode 差值\n    System.out.println(\"2与15比较：\" + str8.compareTo(str9));\n```\n输出结果为：\n```java\nABC与ABC比较：0\nABC与ABD比较：-1\nABC与ABCD比较：-1\nABC与ABCDE比较：-2\n你好与大家好比较：-2503\n2与15比较：1\n```","source":"_posts/Java-String-compareTo方法详解.md","raw":"---\ntitle: Java String compareTo方法详解\ncategories: Java\ntags:\n  - Java基础\n  - String\n  - compareTo\nabbrlink: 928514d2\ndate: 2022-12-11 19:53:47\ndescription: 带你了解一下String中的compareTo方法。揭露那些不为人知的代码！\n---\n### 解释\ncompareTo方法来自Comparable接口，String实现了该接口，具体实现如下：\n\n```java\n/**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * <p>\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let <i>k</i> be the smallest such index; then the string\n     * whose character at position <i>k</i> has the smaller value, as\n     * determined by using the &lt; operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * <blockquote><pre>\n     * this.charAt(k)-anotherString.charAt(k)\n     * </pre></blockquote>\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * <blockquote><pre>\n     * this.length()-anotherString.length()\n     * </pre></blockquote>\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        int len1 = value.length;\n        int len2 = anotherString.value.length;\n        int lim = Math.min(len1, len2);\n        char v1[] = value;\n        char v2[] = anotherString.value;\n\n        int k = 0;\n        while (k < lim) {\n            char c1 = v1[k];\n            char c2 = v2[k];\n            if (c1 != c2) {\n                return c1 - c2;\n            }\n            k++;\n        }\n        return len1 - len2;\n    }\n```\n根据上面的代码，我们可以知道String的compareTo是单个字符依次进行比较的，于是可以得出如下结论：\n1、如果两个字符串的长度一样，从下标为0的位置开始，依次比较每个位置上字符的Unicode码值的大小，如果相等，则继续比较下一个位置，否则直接返回两者Unicode码值的差值，如果所有位置的字符的Unicode码值都相等，则返回两个字符串的长度差值，即0;\n2、如果两个字符串的长度不一样，从下标为0的位置开始，依次比较每个位置上字符的Unicode码值的大小，如果相等，则继续比较下一个位置，否则直接返回两者Unicode码值的差值，如果长度更短的字符串的所有位置都毕竟比较完了，发现都是相等，则返回两个字符串的长度差值（<font color='red'>注意：这里有一个需要避坑的地方，千万不要拿长度不一样的数字字符串去compareTo比较，比如\"2\".compareTo(\"15\")，你可能期望返回-1，实际却返回1</font>）。\n\n### 实例\n```java\n    String str1 = \"ABC\";\n    String str2 = \"ABC\";\n    String str3 = \"ABD\";\n    String str4 = \"ABCD\";\n    String str5 = \"ABCDE\";\n    String str6 = \"你好\";\n    String str7 = \"大家好\";\n    String str8 = \"2\";\n    String str9 = \"15\";\n\n    System.out.println(\"ABC与ABC比较：\" + str1.compareTo(str2));\n    System.out.println(\"ABC与ABD比较：\" + str1.compareTo(str3));\n    System.out.println(\"ABC与ABCD比较：\" + str1.compareTo(str4));\n    System.out.println(\"ABC与ABCDE比较：\" + str1.compareTo(str5));\n    System.out.println(\"你好与大家好比较：\" + str6.compareTo(str7));// 返回你和大的Unicode 差值\n    System.out.println(\"2与15比较：\" + str8.compareTo(str9));\n```\n输出结果为：\n```java\nABC与ABC比较：0\nABC与ABD比较：-1\nABC与ABCD比较：-1\nABC与ABCDE比较：-2\n你好与大家好比较：-2503\n2与15比较：1\n```","slug":"Java-String-compareTo方法详解","published":1,"updated":"2022-12-13T02:57:20.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clblx16d3000cvgvj1v0lhrfn","content":"<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><p>compareTo方法来自Comparable接口，String实现了该接口，具体实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Compares two strings lexicographically.</span></span><br><span class=\"line\"><span class=\"comment\">     * The comparison is based on the Unicode value of each character in</span></span><br><span class=\"line\"><span class=\"comment\">     * the strings. The character sequence represented by this</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@code</span> String&#125; object is compared lexicographically to the</span></span><br><span class=\"line\"><span class=\"comment\">     * character sequence represented by the argument string. The result is</span></span><br><span class=\"line\"><span class=\"comment\">     * a negative integer if this &#123;<span class=\"doctag\">@code</span> String&#125; object</span></span><br><span class=\"line\"><span class=\"comment\">     * lexicographically precedes the argument string. The result is a</span></span><br><span class=\"line\"><span class=\"comment\">     * positive integer if this &#123;<span class=\"doctag\">@code</span> String&#125; object lexicographically</span></span><br><span class=\"line\"><span class=\"comment\">     * follows the argument string. The result is zero if the strings</span></span><br><span class=\"line\"><span class=\"comment\">     * are equal; &#123;<span class=\"doctag\">@code</span> compareTo&#125; returns &#123;<span class=\"doctag\">@code</span> 0&#125; exactly when</span></span><br><span class=\"line\"><span class=\"comment\">     * the &#123;<span class=\"doctag\">@link</span> #equals(Object)&#125; method would return &#123;<span class=\"doctag\">@code</span> true&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This is the definition of lexicographic ordering. If two strings are</span></span><br><span class=\"line\"><span class=\"comment\">     * different, then either they have different characters at some index</span></span><br><span class=\"line\"><span class=\"comment\">     * that is a valid index for both strings, or their lengths are different,</span></span><br><span class=\"line\"><span class=\"comment\">     * or both. If they have different characters at one or more index</span></span><br><span class=\"line\"><span class=\"comment\">     * positions, let &lt;i&gt;k&lt;/i&gt; be the smallest such index; then the string</span></span><br><span class=\"line\"><span class=\"comment\">     * whose character at position &lt;i&gt;k&lt;/i&gt; has the smaller value, as</span></span><br><span class=\"line\"><span class=\"comment\">     * determined by using the &amp;lt; operator, lexicographically precedes the</span></span><br><span class=\"line\"><span class=\"comment\">     * other string. In this case, &#123;<span class=\"doctag\">@code</span> compareTo&#125; returns the</span></span><br><span class=\"line\"><span class=\"comment\">     * difference of the two character values at position &#123;<span class=\"doctag\">@code</span> k&#125; in</span></span><br><span class=\"line\"><span class=\"comment\">     * the two string -- that is, the value:</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * this.charAt(k)-anotherString.charAt(k)</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * If there is no index position at which they differ, then the shorter</span></span><br><span class=\"line\"><span class=\"comment\">     * string lexicographically precedes the longer string. In this case,</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@code</span> compareTo&#125; returns the difference of the lengths of the</span></span><br><span class=\"line\"><span class=\"comment\">     * strings -- that is, the value:</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * this.length()-anotherString.length()</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>   anotherString   the &#123;<span class=\"doctag\">@code</span> String&#125; to be compared.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  the value &#123;<span class=\"doctag\">@code</span> 0&#125; if the argument string is equal to</span></span><br><span class=\"line\"><span class=\"comment\">     *          this string; a value less than &#123;<span class=\"doctag\">@code</span> 0&#125; if this string</span></span><br><span class=\"line\"><span class=\"comment\">     *          is lexicographically less than the string argument; and a</span></span><br><span class=\"line\"><span class=\"comment\">     *          value greater than &#123;<span class=\"doctag\">@code</span> 0&#125; if this string is</span></span><br><span class=\"line\"><span class=\"comment\">     *          lexicographically greater than the string argument.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(String anotherString)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len1</span> <span class=\"operator\">=</span> value.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len2</span> <span class=\"operator\">=</span> anotherString.value.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">lim</span> <span class=\"operator\">=</span> Math.min(len1, len2);</span><br><span class=\"line\">        <span class=\"type\">char</span> v1[] = value;</span><br><span class=\"line\">        <span class=\"type\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; lim) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> v1[k];</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> v2[k];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c1 != c2) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> c1 - c2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len1 - len2;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>根据上面的代码，我们可以知道String的compareTo是单个字符依次进行比较的，于是可以得出如下结论：<br>1、如果两个字符串的长度一样，从下标为0的位置开始，依次比较每个位置上字符的Unicode码值的大小，如果相等，则继续比较下一个位置，否则直接返回两者Unicode码值的差值，如果所有位置的字符的Unicode码值都相等，则返回两个字符串的长度差值，即0;<br>2、如果两个字符串的长度不一样，从下标为0的位置开始，依次比较每个位置上字符的Unicode码值的大小，如果相等，则继续比较下一个位置，否则直接返回两者Unicode码值的差值，如果长度更短的字符串的所有位置都毕竟比较完了，发现都是相等，则返回两个字符串的长度差值（<font color='red'>注意：这里有一个需要避坑的地方，千万不要拿长度不一样的数字字符串去compareTo比较，比如”2”.compareTo(“15”)，你可能期望返回-1，实际却返回1</font>）。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABC&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABC&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str3</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABD&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str4</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCD&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str5</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDE&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str6</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你好&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str7</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;大家好&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str8</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str9</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;15&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;ABC与ABC比较：&quot;</span> + str1.compareTo(str2));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;ABC与ABD比较：&quot;</span> + str1.compareTo(str3));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;ABC与ABCD比较：&quot;</span> + str1.compareTo(str4));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;ABC与ABCDE比较：&quot;</span> + str1.compareTo(str5));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;你好与大家好比较：&quot;</span> + str6.compareTo(str7));<span class=\"comment\">// 返回你和大的Unicode 差值</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;2与15比较：&quot;</span> + str8.compareTo(str9));</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ABC与ABC比较：<span class=\"number\">0</span></span><br><span class=\"line\">ABC与ABD比较：-<span class=\"number\">1</span></span><br><span class=\"line\">ABC与ABCD比较：-<span class=\"number\">1</span></span><br><span class=\"line\">ABC与ABCDE比较：-<span class=\"number\">2</span></span><br><span class=\"line\">你好与大家好比较：-<span class=\"number\">2503</span></span><br><span class=\"line\"><span class=\"number\">2</span>与<span class=\"number\">15</span>比较：<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><p>compareTo方法来自Comparable接口，String实现了该接口，具体实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Compares two strings lexicographically.</span></span><br><span class=\"line\"><span class=\"comment\">     * The comparison is based on the Unicode value of each character in</span></span><br><span class=\"line\"><span class=\"comment\">     * the strings. The character sequence represented by this</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@code</span> String&#125; object is compared lexicographically to the</span></span><br><span class=\"line\"><span class=\"comment\">     * character sequence represented by the argument string. The result is</span></span><br><span class=\"line\"><span class=\"comment\">     * a negative integer if this &#123;<span class=\"doctag\">@code</span> String&#125; object</span></span><br><span class=\"line\"><span class=\"comment\">     * lexicographically precedes the argument string. The result is a</span></span><br><span class=\"line\"><span class=\"comment\">     * positive integer if this &#123;<span class=\"doctag\">@code</span> String&#125; object lexicographically</span></span><br><span class=\"line\"><span class=\"comment\">     * follows the argument string. The result is zero if the strings</span></span><br><span class=\"line\"><span class=\"comment\">     * are equal; &#123;<span class=\"doctag\">@code</span> compareTo&#125; returns &#123;<span class=\"doctag\">@code</span> 0&#125; exactly when</span></span><br><span class=\"line\"><span class=\"comment\">     * the &#123;<span class=\"doctag\">@link</span> #equals(Object)&#125; method would return &#123;<span class=\"doctag\">@code</span> true&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * This is the definition of lexicographic ordering. If two strings are</span></span><br><span class=\"line\"><span class=\"comment\">     * different, then either they have different characters at some index</span></span><br><span class=\"line\"><span class=\"comment\">     * that is a valid index for both strings, or their lengths are different,</span></span><br><span class=\"line\"><span class=\"comment\">     * or both. If they have different characters at one or more index</span></span><br><span class=\"line\"><span class=\"comment\">     * positions, let &lt;i&gt;k&lt;/i&gt; be the smallest such index; then the string</span></span><br><span class=\"line\"><span class=\"comment\">     * whose character at position &lt;i&gt;k&lt;/i&gt; has the smaller value, as</span></span><br><span class=\"line\"><span class=\"comment\">     * determined by using the &amp;lt; operator, lexicographically precedes the</span></span><br><span class=\"line\"><span class=\"comment\">     * other string. In this case, &#123;<span class=\"doctag\">@code</span> compareTo&#125; returns the</span></span><br><span class=\"line\"><span class=\"comment\">     * difference of the two character values at position &#123;<span class=\"doctag\">@code</span> k&#125; in</span></span><br><span class=\"line\"><span class=\"comment\">     * the two string -- that is, the value:</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * this.charAt(k)-anotherString.charAt(k)</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * If there is no index position at which they differ, then the shorter</span></span><br><span class=\"line\"><span class=\"comment\">     * string lexicographically precedes the longer string. In this case,</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@code</span> compareTo&#125; returns the difference of the lengths of the</span></span><br><span class=\"line\"><span class=\"comment\">     * strings -- that is, the value:</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * this.length()-anotherString.length()</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>   anotherString   the &#123;<span class=\"doctag\">@code</span> String&#125; to be compared.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  the value &#123;<span class=\"doctag\">@code</span> 0&#125; if the argument string is equal to</span></span><br><span class=\"line\"><span class=\"comment\">     *          this string; a value less than &#123;<span class=\"doctag\">@code</span> 0&#125; if this string</span></span><br><span class=\"line\"><span class=\"comment\">     *          is lexicographically less than the string argument; and a</span></span><br><span class=\"line\"><span class=\"comment\">     *          value greater than &#123;<span class=\"doctag\">@code</span> 0&#125; if this string is</span></span><br><span class=\"line\"><span class=\"comment\">     *          lexicographically greater than the string argument.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(String anotherString)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len1</span> <span class=\"operator\">=</span> value.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len2</span> <span class=\"operator\">=</span> anotherString.value.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">lim</span> <span class=\"operator\">=</span> Math.min(len1, len2);</span><br><span class=\"line\">        <span class=\"type\">char</span> v1[] = value;</span><br><span class=\"line\">        <span class=\"type\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; lim) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> v1[k];</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> v2[k];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c1 != c2) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> c1 - c2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len1 - len2;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>根据上面的代码，我们可以知道String的compareTo是单个字符依次进行比较的，于是可以得出如下结论：<br>1、如果两个字符串的长度一样，从下标为0的位置开始，依次比较每个位置上字符的Unicode码值的大小，如果相等，则继续比较下一个位置，否则直接返回两者Unicode码值的差值，如果所有位置的字符的Unicode码值都相等，则返回两个字符串的长度差值，即0;<br>2、如果两个字符串的长度不一样，从下标为0的位置开始，依次比较每个位置上字符的Unicode码值的大小，如果相等，则继续比较下一个位置，否则直接返回两者Unicode码值的差值，如果长度更短的字符串的所有位置都毕竟比较完了，发现都是相等，则返回两个字符串的长度差值（<font color='red'>注意：这里有一个需要避坑的地方，千万不要拿长度不一样的数字字符串去compareTo比较，比如”2”.compareTo(“15”)，你可能期望返回-1，实际却返回1</font>）。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABC&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABC&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str3</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABD&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str4</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCD&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str5</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDE&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str6</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你好&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str7</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;大家好&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str8</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str9</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;15&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;ABC与ABC比较：&quot;</span> + str1.compareTo(str2));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;ABC与ABD比较：&quot;</span> + str1.compareTo(str3));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;ABC与ABCD比较：&quot;</span> + str1.compareTo(str4));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;ABC与ABCDE比较：&quot;</span> + str1.compareTo(str5));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;你好与大家好比较：&quot;</span> + str6.compareTo(str7));<span class=\"comment\">// 返回你和大的Unicode 差值</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;2与15比较：&quot;</span> + str8.compareTo(str9));</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ABC与ABC比较：<span class=\"number\">0</span></span><br><span class=\"line\">ABC与ABD比较：-<span class=\"number\">1</span></span><br><span class=\"line\">ABC与ABCD比较：-<span class=\"number\">1</span></span><br><span class=\"line\">ABC与ABCDE比较：-<span class=\"number\">2</span></span><br><span class=\"line\">你好与大家好比较：-<span class=\"number\">2503</span></span><br><span class=\"line\"><span class=\"number\">2</span>与<span class=\"number\">15</span>比较：<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>"},{"title":"pages搭建hexo博客","sticky":999,"description":"零成本方案！教你怎么利用github pages搭建hexo博客！！！","abbrlink":"5434c7eb","date":"2022-12-13T03:04:48.000Z","_content":"### 准备工作\n#### github账号\n&#8195;&#8195;作为IT工作者，大家应该都有github账号。如果没有的话，可到官网（https://github.com/） 去注册一个。\n\n#### 安装git\n&#8195;&#8195;这个很简单，如果电脑上没有安装，可以参照菜鸟教程（https://www.runoob.com/git/git-install-setup.html）\n\n#### 安装nodejs\n&#8195;&#8195;因为hexo是基于nodejs编写的，所以需要在电脑安装nodejs，具体可以参照菜鸟教程（https://www.runoob.com/nodejs/nodejs-install-setup.html） 安装\n\n\n### 创建仓库\n&#8195;&#8195;登录github后，进入github首页（https://github.com/） ，在如下红框的位置点击进入创建仓库页面\n![](1.jpg)\n\n仓库名必须为“username.github.io”，其中username为你在github上的用户名\n![](2.jpg)\n\n点击创建之后就会有个一个默认的分支叫main，这个分支用来存放hexo生成之后的html、css文件等。另外，最好再建一个分支用来放博客源码，我们日常写文章都在这个分支写，分支名称可以随便写，比如我这里把分支名称起为hexo\n\n\n### 安装hexo\n#### 安装博客框架\n在任意位置打开命令窗口，输入以下命令\n```shell\nnpm install -g hexo-cli\n```\n\n#### 创建博客项目\n打开命令窗口，定位在你想存放博客项目的位置（不用建目录，hexo命令会自动建），依次输入以下命令\n```shell\nhexo init hexo-blog\n\ncd hexo-blog\n\nnpm install\n```\n其中，hexo-blog为博客项目的名字，你可以换成你想要的任意英文名。\n输入完以上命令之后，一个博客项目就建好了，如果想本地启动，只需要依次输入以下命令：\n```shell\n# 生成博客静态文件\nhexo g\n# 预览\nhexo server\n```\n启动完成之后，在浏览器输入http://localhost:4000，默认页面如下：\n![](3.jpg)\n\n### 关联github\n&#8195;&#8195;博客项目建好之后，我们还只能在本地看，要想通过github pages访问，则必须和github仓库关联。\n\n&#8195;&#8195;在如下位置找到第二步创建的仓库的克隆地址\n![](4.jpg)\n\n在空白位置（非博客项目文件夹内）打开git命令窗口，输入如下命令克隆\n```shell\ngit clone https://github.com/username/username.github.io.git\n```\n其中https://github.com/username/username.github.io.git是上面复制的地址。\n\n接着，我们需要输入“git checkout hexo”命令切换到hexo分支，hexo分支就是第二步说的存放博客源码的分支。\n\n完成这些操作之后，进入username.github.io.git目录找到.git文件夹，把它移动到博客项目的根目录，这个时候博客项目就跟github关联起来了。\n\n\n### 发布到github\n&#8195;&#8195;第四步只是将博客源码关联到github，但没有把生成的博客静态文件发布到github的main分支上。要实现这一步，需要借助一个nodejs插件来实现。在博客项目根目录打开命令窗口，输入以下命令安装插件：\n```shell\nnpm install hexo-deployer-git --save\n```\n然后修改根目录下的_config.yml，配置github相关信息\n```shell\ndeploy:\n  type: git\n  repo: https://github.com/username/username.github.io.git\n  branch: main\n```\n配置好之后，如果需要发布到github，只需要依次输入以下命令：\n```shell\nhexo clean\n# 生成博客静态文件\nhexo g\n# 发布到github\nhexo d\n```\n发布成功之后，在浏览器输入https://username.github.io/ 就能看到你的博客啦！","source":"_posts/pages搭建hexo博客.md","raw":"---\ntitle: pages搭建hexo博客\nsticky: 999\ncategories: 运维\ndescription: 零成本方案！教你怎么利用github pages搭建hexo博客！！！\ntags:\n  - hexo\n  - github\n  - github pages\n  - 博客\nabbrlink: 5434c7eb\ndate: 2022-12-13 11:04:48\n---\n### 准备工作\n#### github账号\n&#8195;&#8195;作为IT工作者，大家应该都有github账号。如果没有的话，可到官网（https://github.com/） 去注册一个。\n\n#### 安装git\n&#8195;&#8195;这个很简单，如果电脑上没有安装，可以参照菜鸟教程（https://www.runoob.com/git/git-install-setup.html）\n\n#### 安装nodejs\n&#8195;&#8195;因为hexo是基于nodejs编写的，所以需要在电脑安装nodejs，具体可以参照菜鸟教程（https://www.runoob.com/nodejs/nodejs-install-setup.html） 安装\n\n\n### 创建仓库\n&#8195;&#8195;登录github后，进入github首页（https://github.com/） ，在如下红框的位置点击进入创建仓库页面\n![](1.jpg)\n\n仓库名必须为“username.github.io”，其中username为你在github上的用户名\n![](2.jpg)\n\n点击创建之后就会有个一个默认的分支叫main，这个分支用来存放hexo生成之后的html、css文件等。另外，最好再建一个分支用来放博客源码，我们日常写文章都在这个分支写，分支名称可以随便写，比如我这里把分支名称起为hexo\n\n\n### 安装hexo\n#### 安装博客框架\n在任意位置打开命令窗口，输入以下命令\n```shell\nnpm install -g hexo-cli\n```\n\n#### 创建博客项目\n打开命令窗口，定位在你想存放博客项目的位置（不用建目录，hexo命令会自动建），依次输入以下命令\n```shell\nhexo init hexo-blog\n\ncd hexo-blog\n\nnpm install\n```\n其中，hexo-blog为博客项目的名字，你可以换成你想要的任意英文名。\n输入完以上命令之后，一个博客项目就建好了，如果想本地启动，只需要依次输入以下命令：\n```shell\n# 生成博客静态文件\nhexo g\n# 预览\nhexo server\n```\n启动完成之后，在浏览器输入http://localhost:4000，默认页面如下：\n![](3.jpg)\n\n### 关联github\n&#8195;&#8195;博客项目建好之后，我们还只能在本地看，要想通过github pages访问，则必须和github仓库关联。\n\n&#8195;&#8195;在如下位置找到第二步创建的仓库的克隆地址\n![](4.jpg)\n\n在空白位置（非博客项目文件夹内）打开git命令窗口，输入如下命令克隆\n```shell\ngit clone https://github.com/username/username.github.io.git\n```\n其中https://github.com/username/username.github.io.git是上面复制的地址。\n\n接着，我们需要输入“git checkout hexo”命令切换到hexo分支，hexo分支就是第二步说的存放博客源码的分支。\n\n完成这些操作之后，进入username.github.io.git目录找到.git文件夹，把它移动到博客项目的根目录，这个时候博客项目就跟github关联起来了。\n\n\n### 发布到github\n&#8195;&#8195;第四步只是将博客源码关联到github，但没有把生成的博客静态文件发布到github的main分支上。要实现这一步，需要借助一个nodejs插件来实现。在博客项目根目录打开命令窗口，输入以下命令安装插件：\n```shell\nnpm install hexo-deployer-git --save\n```\n然后修改根目录下的_config.yml，配置github相关信息\n```shell\ndeploy:\n  type: git\n  repo: https://github.com/username/username.github.io.git\n  branch: main\n```\n配置好之后，如果需要发布到github，只需要依次输入以下命令：\n```shell\nhexo clean\n# 生成博客静态文件\nhexo g\n# 发布到github\nhexo d\n```\n发布成功之后，在浏览器输入https://username.github.io/ 就能看到你的博客啦！","slug":"pages搭建hexo博客","published":1,"updated":"2022-12-13T07:41:47.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clblx16d4000dvgvj9mun1ez4","content":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><h4 id=\"github账号\"><a href=\"#github账号\" class=\"headerlink\" title=\"github账号\"></a>github账号</h4><p>&#8195;&#8195;作为IT工作者，大家应该都有github账号。如果没有的话，可到官网（<a href=\"https://github.com/%EF%BC%89\">https://github.com/）</a> 去注册一个。</p>\n<h4 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h4><p>&#8195;&#8195;这个很简单，如果电脑上没有安装，可以参照菜鸟教程（<a href=\"https://www.runoob.com/git/git-install-setup.html%EF%BC%89\">https://www.runoob.com/git/git-install-setup.html）</a></p>\n<h4 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h4><p>&#8195;&#8195;因为hexo是基于nodejs编写的，所以需要在电脑安装nodejs，具体可以参照菜鸟教程（<a href=\"https://www.runoob.com/nodejs/nodejs-install-setup.html%EF%BC%89\">https://www.runoob.com/nodejs/nodejs-install-setup.html）</a> 安装</p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p>&#8195;&#8195;登录github后，进入github首页（<a href=\"https://github.com/%EF%BC%89\">https://github.com/）</a> ，在如下红框的位置点击进入创建仓库页面<br><img src=\"/posts/5434c7eb/1.jpg\"></p>\n<p>仓库名必须为“username.github.io”，其中username为你在github上的用户名<br><img src=\"/posts/5434c7eb/2.jpg\"></p>\n<p>点击创建之后就会有个一个默认的分支叫main，这个分支用来存放hexo生成之后的html、css文件等。另外，最好再建一个分支用来放博客源码，我们日常写文章都在这个分支写，分支名称可以随便写，比如我这里把分支名称起为hexo</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><h4 id=\"安装博客框架\"><a href=\"#安装博客框架\" class=\"headerlink\" title=\"安装博客框架\"></a>安装博客框架</h4><p>在任意位置打开命令窗口，输入以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建博客项目\"><a href=\"#创建博客项目\" class=\"headerlink\" title=\"创建博客项目\"></a>创建博客项目</h4><p>打开命令窗口，定位在你想存放博客项目的位置（不用建目录，hexo命令会自动建），依次输入以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init hexo-blog</span><br><span class=\"line\"></span><br><span class=\"line\">cd hexo-blog</span><br><span class=\"line\"></span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>其中，hexo-blog为博客项目的名字，你可以换成你想要的任意英文名。<br>输入完以上命令之后，一个博客项目就建好了，如果想本地启动，只需要依次输入以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成博客静态文件</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">预览</span></span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>启动完成之后，在浏览器输入<a href=\"http://localhost:4000，默认页面如下：\">http://localhost:4000，默认页面如下：</a><br><img src=\"/posts/5434c7eb/3.jpg\"></p>\n<h3 id=\"关联github\"><a href=\"#关联github\" class=\"headerlink\" title=\"关联github\"></a>关联github</h3><p>&#8195;&#8195;博客项目建好之后，我们还只能在本地看，要想通过github pages访问，则必须和github仓库关联。</p>\n<p>&#8195;&#8195;在如下位置找到第二步创建的仓库的克隆地址<br><img src=\"/posts/5434c7eb/4.jpg\"></p>\n<p>在空白位置（非博客项目文件夹内）打开git命令窗口，输入如下命令克隆</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/username/username.github.io.git</span><br></pre></td></tr></table></figure>\n<p>其中<a href=\"https://github.com/username/username.github.io.git%E6%98%AF%E4%B8%8A%E9%9D%A2%E5%A4%8D%E5%88%B6%E7%9A%84%E5%9C%B0%E5%9D%80%E3%80%82\">https://github.com/username/username.github.io.git是上面复制的地址。</a></p>\n<p>接着，我们需要输入“git checkout hexo”命令切换到hexo分支，hexo分支就是第二步说的存放博客源码的分支。</p>\n<p>完成这些操作之后，进入username.github.io.git目录找到.git文件夹，把它移动到博客项目的根目录，这个时候博客项目就跟github关联起来了。</p>\n<h3 id=\"发布到github\"><a href=\"#发布到github\" class=\"headerlink\" title=\"发布到github\"></a>发布到github</h3><p>&#8195;&#8195;第四步只是将博客源码关联到github，但没有把生成的博客静态文件发布到github的main分支上。要实现这一步，需要借助一个nodejs插件来实现。在博客项目根目录打开命令窗口，输入以下命令安装插件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后修改根目录下的_config.yml，配置github相关信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/username/username.github.io.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n<p>配置好之后，如果需要发布到github，只需要依次输入以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成博客静态文件</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">发布到github</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>发布成功之后，在浏览器输入<a href=\"https://username.github.io/\">https://username.github.io/</a> 就能看到你的博客啦！</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><h4 id=\"github账号\"><a href=\"#github账号\" class=\"headerlink\" title=\"github账号\"></a>github账号</h4><p>&#8195;&#8195;作为IT工作者，大家应该都有github账号。如果没有的话，可到官网（<a href=\"https://github.com/%EF%BC%89\">https://github.com/）</a> 去注册一个。</p>\n<h4 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h4><p>&#8195;&#8195;这个很简单，如果电脑上没有安装，可以参照菜鸟教程（<a href=\"https://www.runoob.com/git/git-install-setup.html%EF%BC%89\">https://www.runoob.com/git/git-install-setup.html）</a></p>\n<h4 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h4><p>&#8195;&#8195;因为hexo是基于nodejs编写的，所以需要在电脑安装nodejs，具体可以参照菜鸟教程（<a href=\"https://www.runoob.com/nodejs/nodejs-install-setup.html%EF%BC%89\">https://www.runoob.com/nodejs/nodejs-install-setup.html）</a> 安装</p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p>&#8195;&#8195;登录github后，进入github首页（<a href=\"https://github.com/%EF%BC%89\">https://github.com/）</a> ，在如下红框的位置点击进入创建仓库页面<br><img src=\"/posts/5434c7eb/1.jpg\"></p>\n<p>仓库名必须为“username.github.io”，其中username为你在github上的用户名<br><img src=\"/posts/5434c7eb/2.jpg\"></p>\n<p>点击创建之后就会有个一个默认的分支叫main，这个分支用来存放hexo生成之后的html、css文件等。另外，最好再建一个分支用来放博客源码，我们日常写文章都在这个分支写，分支名称可以随便写，比如我这里把分支名称起为hexo</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><h4 id=\"安装博客框架\"><a href=\"#安装博客框架\" class=\"headerlink\" title=\"安装博客框架\"></a>安装博客框架</h4><p>在任意位置打开命令窗口，输入以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建博客项目\"><a href=\"#创建博客项目\" class=\"headerlink\" title=\"创建博客项目\"></a>创建博客项目</h4><p>打开命令窗口，定位在你想存放博客项目的位置（不用建目录，hexo命令会自动建），依次输入以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init hexo-blog</span><br><span class=\"line\"></span><br><span class=\"line\">cd hexo-blog</span><br><span class=\"line\"></span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>其中，hexo-blog为博客项目的名字，你可以换成你想要的任意英文名。<br>输入完以上命令之后，一个博客项目就建好了，如果想本地启动，只需要依次输入以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成博客静态文件</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">预览</span></span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>启动完成之后，在浏览器输入<a href=\"http://localhost:4000，默认页面如下：\">http://localhost:4000，默认页面如下：</a><br><img src=\"/posts/5434c7eb/3.jpg\"></p>\n<h3 id=\"关联github\"><a href=\"#关联github\" class=\"headerlink\" title=\"关联github\"></a>关联github</h3><p>&#8195;&#8195;博客项目建好之后，我们还只能在本地看，要想通过github pages访问，则必须和github仓库关联。</p>\n<p>&#8195;&#8195;在如下位置找到第二步创建的仓库的克隆地址<br><img src=\"/posts/5434c7eb/4.jpg\"></p>\n<p>在空白位置（非博客项目文件夹内）打开git命令窗口，输入如下命令克隆</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/username/username.github.io.git</span><br></pre></td></tr></table></figure>\n<p>其中<a href=\"https://github.com/username/username.github.io.git%E6%98%AF%E4%B8%8A%E9%9D%A2%E5%A4%8D%E5%88%B6%E7%9A%84%E5%9C%B0%E5%9D%80%E3%80%82\">https://github.com/username/username.github.io.git是上面复制的地址。</a></p>\n<p>接着，我们需要输入“git checkout hexo”命令切换到hexo分支，hexo分支就是第二步说的存放博客源码的分支。</p>\n<p>完成这些操作之后，进入username.github.io.git目录找到.git文件夹，把它移动到博客项目的根目录，这个时候博客项目就跟github关联起来了。</p>\n<h3 id=\"发布到github\"><a href=\"#发布到github\" class=\"headerlink\" title=\"发布到github\"></a>发布到github</h3><p>&#8195;&#8195;第四步只是将博客源码关联到github，但没有把生成的博客静态文件发布到github的main分支上。要实现这一步，需要借助一个nodejs插件来实现。在博客项目根目录打开命令窗口，输入以下命令安装插件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后修改根目录下的_config.yml，配置github相关信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/username/username.github.io.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n<p>配置好之后，如果需要发布到github，只需要依次输入以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成博客静态文件</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">发布到github</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>发布成功之后，在浏览器输入<a href=\"https://username.github.io/\">https://username.github.io/</a> 就能看到你的博客啦！</p>\n"}],"PostAsset":[{"_id":"source/_posts/pages搭建hexo博客/1.jpg","post":"clblx16d4000dvgvj9mun1ez4","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pages搭建hexo博客/2.jpg","post":"clblx16d4000dvgvj9mun1ez4","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pages搭建hexo博客/3.jpg","post":"clblx16d4000dvgvj9mun1ez4","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pages搭建hexo博客/4.jpg","post":"clblx16d4000dvgvj9mun1ez4","slug":"4.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"clblx16cm0001vgvj21e87wwr","category_id":"clblx16cw0003vgvj5kc37eq4","_id":"clblx16d10007vgvjezjx3kgk"},{"post_id":"clblx16d3000cvgvj1v0lhrfn","category_id":"clblx16d5000evgvj8w3h7sc8","_id":"clblx16d7000ivgvj0jvheo02"},{"post_id":"clblx16d4000dvgvj9mun1ez4","category_id":"clblx16d7000gvgvj619khk2a","_id":"clblx16d8000kvgvj8lj114us"}],"PostTag":[{"post_id":"clblx16cm0001vgvj21e87wwr","tag_id":"clblx16cy0004vgvj43338pqk","_id":"clblx16d10009vgvjh6wjdqmt"},{"post_id":"clblx16cm0001vgvj21e87wwr","tag_id":"clblx16d00006vgvj93wwg50m","_id":"clblx16d2000avgvjdlxz0qx7"},{"post_id":"clblx16cm0001vgvj21e87wwr","tag_id":"clblx16d10008vgvjglir8nh9","_id":"clblx16d2000bvgvjbndvbmc0"},{"post_id":"clblx16d3000cvgvj1v0lhrfn","tag_id":"clblx16d6000fvgvjeb2g7n73","_id":"clblx16d8000mvgvj1yasfmuy"},{"post_id":"clblx16d3000cvgvj1v0lhrfn","tag_id":"clblx16d7000hvgvj2od077lu","_id":"clblx16d8000nvgvj5nni92n0"},{"post_id":"clblx16d3000cvgvj1v0lhrfn","tag_id":"clblx16d7000jvgvj41r6dpx8","_id":"clblx16d9000pvgvj7onbd7kx"},{"post_id":"clblx16d4000dvgvj9mun1ez4","tag_id":"clblx16d8000lvgvj2v8nckxb","_id":"clblx16d9000svgvj56wt5tln"},{"post_id":"clblx16d4000dvgvj9mun1ez4","tag_id":"clblx16d8000ovgvj4nom4ykv","_id":"clblx16d9000tvgvjbmw07nuk"},{"post_id":"clblx16d4000dvgvj9mun1ez4","tag_id":"clblx16d9000qvgvjh0bcbhaf","_id":"clblx16da000uvgvjc8b162u8"},{"post_id":"clblx16d4000dvgvj9mun1ez4","tag_id":"clblx16d9000rvgvjdjhk7ion","_id":"clblx16da000vvgvj9v5620mt"}],"Tag":[{"name":"docker","_id":"clblx16cy0004vgvj43338pqk"},{"name":"MySQL","_id":"clblx16d00006vgvj93wwg50m"},{"name":"MySQL5.7","_id":"clblx16d10008vgvjglir8nh9"},{"name":"Java基础","_id":"clblx16d6000fvgvjeb2g7n73"},{"name":"String","_id":"clblx16d7000hvgvj2od077lu"},{"name":"compareTo","_id":"clblx16d7000jvgvj41r6dpx8"},{"name":"hexo","_id":"clblx16d8000lvgvj2v8nckxb"},{"name":"github","_id":"clblx16d8000ovgvj4nom4ykv"},{"name":"github pages","_id":"clblx16d9000qvgvjh0bcbhaf"},{"name":"博客","_id":"clblx16d9000rvgvjdjhk7ion"}]}}